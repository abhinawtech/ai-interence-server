# ================================================================================================
# QDRANT CONFIGURATION MANAGEMENT
# ================================================================================================
#
# PURPOSE:
# Production-optimized configuration for Qdrant vector database with:
# - HNSW indexing parameters optimized for AI workloads
# - Performance tuning for large-scale vector operations
# - Security and networking configurations
# - Monitoring and telemetry settings
#
# ================================================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-config
  namespace: qdrant-system
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: configuration
    app.kubernetes.io/version: "1.7.4"
data:
  # ==============================================================================================
  # MAIN QDRANT CONFIGURATION
  # ==============================================================================================
  production.yaml: |
    # Qdrant Production Configuration
    # Optimized for AI embedding workloads and high-performance vector operations
    
    log_level: INFO
    
    # ============================================================================================
    # SERVICE CONFIGURATION
    # ============================================================================================
    service:
      http_port: 6333
      grpc_port: 6334
      enable_cors: true
      cors_origins: ["*"]  # Restrict in production
      max_request_size_mb: 128  # Increased for batch operations
      max_workers: 8            # Optimized for production load
      
    # ============================================================================================
    # STORAGE CONFIGURATION
    # ============================================================================================
    storage:
      # Storage paths
      storage_path: /qdrant/storage
      snapshots_path: /qdrant/snapshots
      temp_path: /tmp/qdrant
      
      # Performance optimization
      performance:
        max_search_threads: 8       # Maximum threads for search operations
        max_optimization_threads: 4 # Background optimization threads
        indexing_threshold: 50000   # Vectors before indexing starts
        
      # Memory management for production
      memory:
        global_m: 64                # HNSW parameter M (connectivity)
        global_ef_construct: 1024   # Construction parameter
        global_ef: 512              # Search parameter
        
      # HNSW Index Configuration (AI-optimized)
      hnsw:
        m: 64                       # Connectivity parameter (higher = better recall)
        ef_construct: 1024          # Construction time parameter
        full_scan_threshold: 20000  # Switch to exact search below this size
        max_indexing_threads: 8     # Parallel indexing threads
        
      # Write-Ahead Log (WAL) configuration
      wal:
        wal_capacity_mb: 128        # WAL file size
        wal_segments_ahead: 4       # Number of WAL segments to keep
        
      # Optimization settings
      optimizers:
        deleted_threshold: 0.2      # Trigger optimization when 20% deleted
        vacuum_min_vector_number: 5000
        default_segment_number: 4   # Default segments per collection
        max_segment_size_mb: 500    # Maximum segment size
        memmap_threshold_mb: 50     # Memory mapping threshold
        indexing_threshold_mb: 100  # Indexing threshold
        
        # Optimizer settings for different scenarios
        default_segment_number: 4
        max_optimization_threads: 4
        
    # ============================================================================================
    # CLUSTER CONFIGURATION
    # ============================================================================================
    cluster:
      enabled: true
      node_id: 1                    # Will be overridden by environment
      consensus_timeout: 1000
      tick_period_ms: 100
      
    # ============================================================================================
    # TELEMETRY AND MONITORING
    # ============================================================================================
    telemetry_disabled: false
    
  # ==============================================================================================
  # ENVIRONMENT-SPECIFIC OVERRIDES
  # ==============================================================================================
  development.yaml: |
    # Development environment overrides
    log_level: DEBUG
    
    service:
      max_workers: 2
      
    storage:
      performance:
        max_search_threads: 2
        max_optimization_threads: 1
        indexing_threshold: 10000
        
      hnsw:
        m: 32
        ef_construct: 256
        
  staging.yaml: |
    # Staging environment overrides
    log_level: INFO
    
    service:
      max_workers: 4
      
    storage:
      performance:
        max_search_threads: 4
        max_optimization_threads: 2
        indexing_threshold: 25000

---
# ================================================================================================
# QDRANT SECURITY CONFIGURATION
# ================================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-security-config
  namespace: qdrant-system
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: security
data:
  # Security policies and access control
  security-policy.yaml: |
    # Qdrant Security Configuration
    
    # API Security
    api:
      enable_api_key: true
      read_only_api_key: false
      
    # Network security
    network:
      allowed_origins: []  # Configure based on your frontend domains
      enable_cors: true
      max_connections: 1000
      
    # Rate limiting
    rate_limiting:
      enabled: true
      requests_per_minute: 1000
      burst_size: 100
      
  # Network policies for pod communication
  network-policy.yaml: |
    # Network isolation rules
    ingress:
      - from_namespaces: ["ai-inference-system"]
        ports: [6333, 6334]
      - from_namespaces: ["monitoring"]
        ports: [6333]
        
    egress:
      - to_ports: [53]  # DNS
      - to_ports: [443] # HTTPS for external services

---
# ================================================================================================
# QDRANT MONITORING CONFIGURATION
# ================================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-monitoring-config
  namespace: qdrant-system
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: monitoring
data:
  # Prometheus monitoring configuration
  prometheus-config.yaml: |
    # Qdrant metrics configuration
    scrape_configs:
      - job_name: 'qdrant'
        static_configs:
          - targets: ['qdrant-service:6333']
        metrics_path: '/metrics'
        scrape_interval: 30s
        scrape_timeout: 10s
        
  # Health check configuration
  health-check.yaml: |
    # Health check endpoints and parameters
    endpoints:
      - path: /health
        port: 6333
        interval: 30s
        timeout: 10s
        failure_threshold: 3
        success_threshold: 1
        
      - path: /readiness
        port: 6333
        interval: 10s
        timeout: 5s
        failure_threshold: 3
        success_threshold: 1
        
  # Alerting rules
  alerts.yaml: |
    groups:
    - name: qdrant-alerts
      rules:
      - alert: QdrantDown
        expr: up{job="qdrant"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Qdrant instance is down"
          description: "Qdrant has been down for more than 1 minute"
          
      - alert: QdrantHighMemoryUsage
        expr: container_memory_usage_bytes{container="qdrant"} / container_spec_memory_limit_bytes > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Qdrant high memory usage"
          description: "Memory usage is above 90%"
          
      - alert: QdrantHighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{container="qdrant"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Qdrant high CPU usage"
          description: "CPU usage is above 80%"
          
      - alert: QdrantSlowQueries
        expr: histogram_quantile(0.95, qdrant_search_duration_seconds) > 1.0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Qdrant slow search queries"
          description: "95th percentile search latency is above 1 second"

---
# ================================================================================================
# INITIALIZATION SCRIPTS
# ================================================================================================
apiVersion: v1
kind: ConfigMap
metadata:
  name: qdrant-init-scripts
  namespace: qdrant-system
  labels:
    app.kubernetes.io/name: qdrant
    app.kubernetes.io/component: initialization
data:
  # Collection initialization script
  init-collections.sh: |
    #!/bin/bash
    # Initialize default collections for AI workloads
    set -e
    
    QDRANT_URL="http://localhost:6333"
    
    echo "Initializing Qdrant collections..."
    
    # Create embeddings collection (384-dimensional vectors)
    curl -X PUT "${QDRANT_URL}/collections/embeddings" \
         -H "Content-Type: application/json" \
         -d '{
           "vectors": {
             "size": 384,
             "distance": "Cosine",
             "hnsw_config": {
               "m": 64,
               "ef_construct": 1024,
               "full_scan_threshold": 20000
             }
           },
           "optimizers_config": {
             "default_segment_number": 4,
             "max_optimization_threads": 4
           }
         }'
    
    # Create documents collection (768-dimensional vectors)
    curl -X PUT "${QDRANT_URL}/collections/documents" \
         -H "Content-Type: application/json" \
         -d '{
           "vectors": {
             "size": 768,
             "distance": "Cosine",
             "hnsw_config": {
               "m": 64,
               "ef_construct": 1024,
               "full_scan_threshold": 20000
             }
           }
         }'
    
    echo "Collections initialized successfully"
    
  # Health check script
  health-check.sh: |
    #!/bin/bash
    # Comprehensive health check for Qdrant
    set -e
    
    QDRANT_URL="http://localhost:6333"
    
    # Basic health check
    health_status=$(curl -s "${QDRANT_URL}/health" | jq -r '.status')
    if [[ "$health_status" != "ok" ]]; then
        echo "Health check failed: $health_status"
        exit 1
    fi
    
    # Check telemetry endpoint
    curl -s "${QDRANT_URL}/telemetry" > /dev/null
    
    # Check collections endpoint
    curl -s "${QDRANT_URL}/collections" > /dev/null
    
    echo "All health checks passed"
    exit 0